{"version":3,"sources":["Components/feedbackOptions/FeedbackOptions.js","Components/Notification.js","Components/Section.js","Components/statistics/Statistics.js","Components/App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","name","title","type","onClick","Notification","message","Section","children","Statistics","good","neutral","bad","total","positivFeedback","initialState","App","useState","state","setState","countTotalFeedback","result","Math","round","countPositiveFeedbackPercentage","e","btn","target","prev","ReactDOM","render","document","getElementById"],"mappings":"gTA0BeA,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,UAAf,SACGF,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACX,wBAEEC,KAAK,SACLF,KAAMA,EACNG,QAASN,EACTC,UAAU,MALZ,SAOGG,GANID,SCEAI,G,KAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGP,UAAU,eAAb,SAA6BO,MCavBC,EAdC,SAAC,GAAyB,IAAvBL,EAAsB,EAAtBA,MAAOM,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIT,UAAU,gBAAd,SAA+BG,IAC9BM,MC2BQC,G,MA/BI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC/C,OACE,sBAAKf,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAGA,UAAU,mBAAb,mBACQ,+BAAOW,IAAa,OAE5B,oBAAGX,UAAU,mBAAb,sBACW,+BAAOY,OAElB,oBAAGZ,UAAU,mBAAb,kBACO,+BAAOa,UAGhB,oBAAGb,UAAU,QAAb,oBACS,+BAAOc,OAEhB,oBAAGd,UAAU,WAAb,gCACqB,iCAAOe,EAAP,eChBrBjB,EAAU,CACd,CAAEI,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,MAAOC,MAAO,QAElBa,EAAe,CACnBL,KAAM,EACNC,QAAS,EACTC,IAAK,GAkDQI,EA/CH,WACV,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAQMC,EAAqB,WAGzB,OAF+BF,EAAvBR,KAAuBQ,EAAjBP,QAAiBO,EAARN,KAWnBC,EAAQO,IACRC,EAPkC,WACtC,IAAMR,EAAQO,IAEd,OAAOP,EAAQS,KAAKC,MAAoB,IAAbL,EAAMR,KAAcG,GAAS,EAI3CW,GAEf,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBJ,gBAxBH,SAAC2B,GACnB,IAAMC,EAAMD,EAAEE,OAAO1B,KAErBkB,GAAS,SAACS,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBF,EAAME,EAAKF,GAAO,QAqBC7B,QAASA,MAG1D,cAAC,EAAD,CAASK,MAAM,aAAf,SACGW,EACC,cAAC,EAAD,CACEH,KAAMQ,EAAMR,KACZC,QAASO,EAAMP,QACfC,IAAKM,EAAMN,IACXC,MAAOA,EACPC,gBAAiBO,IAGnB,cAAC,EAAD,CAAcf,QAAQ,4B,MCpDhCuB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1c5c663f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FeedbackOptions.css\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className=\"Btn-Box\">\n      {options.map(({ name, title }) => (\n        <button\n          key={name}\n          type=\"button\"\n          name={name}\n          onClick={onLeaveFeedback}\n          className=\"Btn\"\n        >\n          {title}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport './section.css';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p className=\"section-text\">{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React from 'react';\nimport './section.css';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2 className=\"section-title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport './statistics.css';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivFeedback }) => {\n  return (\n    <div className=\"statBox\">\n      <div className=\"feedbackBox\">\n        <p className=\"feedbackBox-Item\">\n          Good: <span>{good}</span>{' '}\n        </p>\n        <p className=\"feedbackBox-Item\">\n          Neutral: <span>{neutral}</span>\n        </p>\n        <p className=\"feedbackBox-Item\">\n          Bad: <span>{bad}</span>\n        </p>\n      </div>\n      <p className=\"Total\">\n        Total: <span>{total}</span>\n      </p>\n      <p className=\"Positive\">\n        Positive feedback: <span>{positivFeedback}%</span>\n      </p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivFeedback: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React, { useState } from \"react\";\nimport FeedbackOptions from \"./feedbackOptions/FeedbackOptions\";\nimport Notification from \"./Notification\";\nimport Section from \"./Section\";\nimport Statistics from \"./statistics/Statistics\";\n\nconst options = [\n  { name: \"good\", title: \"Good\" },\n  { name: \"neutral\", title: \"Neutral\" },\n  { name: \"bad\", title: \"Bad\" },\n];\nconst initialState = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  const addFeedback = (e) => {\n    const btn = e.target.name;\n\n    setState((prev) => ({ ...prev, [btn]: prev[btn] + 1 }));\n  };\n\n  const countTotalFeedback = () => {\n    const { good, neutral, bad } = state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n\n    return total ? Math.round((state.good * 100) / total) : 0;\n  };\n\n  const total = countTotalFeedback();\n  const result = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions onLeaveFeedback={addFeedback} options={options} />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {total ? (\n          <Statistics\n            good={state.good}\n            neutral={state.neutral}\n            bad={state.bad}\n            total={total}\n            positivFeedback={result}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n// state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0,\n// };\n\n// addFeedback = e => {\n//   const btn = e.target.name;\n//   this.setState(prev => ({ [btn]: prev[btn] + 1 }));\n// };\n\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   const total = good + neutral + bad;\n//   return total;\n// };\n\n// countPositiveFeedbackPercentage = () => {\n//   const total = this.countTotalFeedback();\n\n//   return total ? Math.round((this.state.good * 100) / total) : 0;\n// };\n\n// render() {\n// const total = this.countTotalFeedback();\n// const result = this.countPositiveFeedbackPercentage();\n// return (\n// <>\n//   <Section title=\"Please leave feedback\">\n//     <FeedbackOptions\n//       onLeaveFeedback={this.addFeedback}\n//       options={options}\n//     />\n//   </Section>\n\n//   <Section title=\"Statistics\">\n//     {total ? (\n//       <Statistics\n//         good={this.state.good}\n//         neutral={this.state.neutral}\n//         bad={this.state.bad}\n//         total={total}\n//         positivFeedback={result}\n//       />\n//     ) : (\n//       <Notification message=\"No feedback given\" />\n//     )}\n//   </Section>\n// </>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}